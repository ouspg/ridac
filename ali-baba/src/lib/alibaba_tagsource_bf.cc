/*
 * config.h is generated by configure.  It contains the results
 * of probing for features, options etc.  It should be the first
 * file included in your .cc file.
 */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <alibaba_tagsource_bf.h>
#include <gr_io_signature.h>

/*
 * Create a new instance of alibaba_tagsource_bf and return
 * a boost shared_ptr.  This is effectively the public constructor.
 */
alibaba_tagsource_bf_sptr 
alibaba_make_tagsource_bf (float sampling_frequency, float data_rate, float amplitude, int* send_state, string source_filename)
{
  return alibaba_tagsource_bf_sptr (new alibaba_tagsource_bf (sampling_frequency, data_rate,amplitude,send_state, source_filename));
}

/*
 * Specify constraints on number of input and output streams.
 * This info is used to construct the input and output signatures
 * (2nd & 3rd args to gr_block's constructor).  The input and
 * output signatures are used by the runtime system to
 * check that a valid number and type of inputs and outputs
 * are connected to this block.  In this case, we accept
 * only 1 input and 1 output.
 */
static const int MIN_IN = 0;	// mininum number of input streams
static const int MAX_IN = 0;	// maximum number of input streams
static const int MIN_OUT = 1;	// minimum number of output streams
static const int MAX_OUT = 1;	// maximum number of output streams

/*
 * The private constructor
 */
alibaba_tagsource_bf::alibaba_tagsource_bf (float sampling_frequency, float data_rate, float amplitude, int* send_state, string source_filename)
  : gr_sync_block ("tagsource_bf",
	      gr_make_io_signature (MIN_IN, MAX_IN, 0),
	      gr_make_io_signature (MIN_OUT, MAX_OUT, sizeof (float)))
{
	sampling_frequency_=sampling_frequency;
	data_rate_=data_rate;
        samples_per_symbol_=rint(sampling_frequency_/data_rate_);
	amplitude_=amplitude;
        send_state_=send_state;
        comm_elements_=readFromFile (source_filename);
}

/*
 * Our virtual destructor.
 */
alibaba_tagsource_bf::~alibaba_tagsource_bf ()
{
}


unsigned char alibaba_tagsource_bf::hex_to_int(unsigned char value)
{
        
        unsigned char out_value=0;

        switch(value)
        {
                case '0': out_value=0;
                        break;
                case '1': out_value=1;
                        break;
                case '2': out_value=2;
                        break;
                case '3': out_value=3;
                        break;
                case '4': out_value=4;
                        break;
                case '5': out_value=5;
                        break;
                case '6': out_value=6;
                        break;
                case '7': out_value=7;
                        break;
                case '8': out_value=8;
                        break;
                case '9': out_value=9;
                        break;
                case 'A': out_value=10;
                        break;
                case 'B': out_value=11;
                        break;
                case 'C': out_value=12;
                        break;
                case 'D': out_value=13;
                        break;
                case 'E': out_value=14;
                        break;
                case 'F': out_value=15;
                        break;
        }
        return out_value;
}



vector<unsigned char> alibaba_tagsource_bf::convertToNumbers(vector<unsigned char> input)
{
	vector<unsigned char> tmp_vector;
	while(input.size()>=4)
	{		
		if(input[0]=='0'&&input[1]=='x')
		{
			tmp_vector.push_back(hex_to_int(input[2])<<4 | hex_to_int(input[3]));
			input.erase(input.begin(), input.begin()+4);
		}
		else input.erase(input.begin());
	}
	return tmp_vector;	
}



vector<unsigned char> alibaba_tagsource_bf::convertToBinaryAndAddParity(vector<unsigned char> input)
{

	vector<unsigned char> tmp_vector;
	int ones_counter;

	tmp_vector.push_back(1); //start bit
	while(!input.empty())
	{
		ones_counter=0;
		for(int i=0;i<8;i++)
		{
			unsigned char bit= (input[0] >> i) & 0x01;
			if (bit == 1) ones_counter++;
			tmp_vector.push_back(bit);
		}
		if(ones_counter%2 == 1) tmp_vector.push_back(0);
		else tmp_vector.push_back(1);
		input.erase(input.begin());
	}
	return tmp_vector;
}

map<vector<unsigned char>  ,vector<unsigned char> > alibaba_tagsource_bf::readFromFile(string filename)
{
	ifstream input_file;
	vector<unsigned char> input;
	vector<unsigned char> input_reader;
	char name[1000];
        map<vector<unsigned char>  ,vector<unsigned char> > comm_elements;

        input_file.open(filename.c_str());

	while (!input_file.eof()) 
	{
    		input.clear();
		input_file.getline(name, 1000);
		for(int i=0;i<input_file.gcount()-1;i++)
		{
			input.push_back(name[i]);
		}
		if(input[0]=='R' && input_reader.empty()==true)
		{
			input_reader=input;
		}
		else if(input[0]=='R' && !input_reader.empty())
		{
			vector<unsigned char> tmp;			
			comm_elements.insert ( pair<vector<unsigned char> ,vector<unsigned char> >(input_reader, tmp) );
			input_reader=input;
		}
		else if(input[0]=='T' && !input_reader.empty())
		{
			input.erase(input.begin(),input.begin()+3); //delete the 'T: '			
			input= convertToNumbers(input);
			//input= addCRC(input);
			input= convertToBinaryAndAddParity(input);
			comm_elements.insert ( pair<vector<unsigned char> ,vector<unsigned char> >(input_reader, input) );
			input_reader.clear();
		}
		else
		{
			//can not happen in a valid communication!
		}
	}
        return comm_elements;
}



int alibaba_tagsource_bf::output_function(std::vector<float> &out_buffer, float *out, int available_output_items, int out_counter)
{
        int tmp_size=out_buffer.size();
        int min=std::min(tmp_size,available_output_items);
        if(min==0) return 0;
        std::copy(out_buffer.begin(), out_buffer.begin()+min, &out[out_counter]);
        out_buffer.erase(out_buffer.begin(), out_buffer.begin()+min);
        return min;
}

int 
alibaba_tagsource_bf::work (int noutput_items,
			       gr_vector_const_void_star &input_items,
			       gr_vector_void_star &output_items)
{
 
        //FIXME unfinished code! This block does not work as intended!!!!!

  //const char *in = (const char *) input_items[0];
  float *out = (float *) output_items[0];
  int out_counter=0;
  int items_written=0;
  std::vector<unsigned char> sequence_buffer;

  if(!tmp_buffer.empty()) //there are still samples from the previous run!
  {
        items_written= output_function(tmp_buffer, out, noutput_items-out_counter, out_counter);
        if(items_written==noutput_items-out_counter)
        {
                consume_each (0); //we haven't consumed one single input item yet!
                return out_counter+=items_written;
        }
        else
        {
                out_counter+=items_written; 
        }
  }
  vector<unsigned char> hallo;
  unsigned char ATQ[]={2,2,2,2,2,2,2,1,0,0,1,0,0,0,1,0,1,0,0,0,0,0,0,0,0,1,2,2,2,2,2,2,2,2,2};

  switch(*send_state_)
  {
        case 0: sequence_buffer.clear();
                break;
        case 1: 
                sequence_buffer.clear();
                sequence_buffer.assign(ATQ, ATQ+(sizeof ATQ/sizeof *ATQ));
                break;
        case 2: 
                hallo.push_back('R');
	        hallo.push_back(':');
	        hallo.push_back(' ');
	        hallo.push_back('0');
	        hallo.push_back('x');
	        hallo.push_back('9');
	        hallo.push_back('3');
	        hallo.push_back(' ');
	        hallo.push_back('0');
	        hallo.push_back('x');
	        hallo.push_back('2');
	        hallo.push_back('0');
	        hallo.push_back(' ');
                sequence_buffer.clear();
                sequence_buffer=comm_elements_[hallo];
                sequence_buffer.insert(sequence_buffer.begin(),2);
                sequence_buffer.insert(sequence_buffer.begin(),2);
                sequence_buffer.insert(sequence_buffer.begin(),2);
                sequence_buffer.insert(sequence_buffer.begin(),2);
                sequence_buffer.insert(sequence_buffer.begin(),2);
                sequence_buffer.insert(sequence_buffer.begin(),2);
                sequence_buffer.insert(sequence_buffer.begin(),2);
                sequence_buffer.push_back(2);
                sequence_buffer.push_back(2);
                sequence_buffer.push_back(2);
                sequence_buffer.push_back(2);
                sequence_buffer.push_back(2);
                sequence_buffer.push_back(2);
                sequence_buffer.push_back(2);
                sequence_buffer.push_back(2);
                break;
  }

  for(int i=0;i<sequence_buffer.size();i++)
  {
        if(sequence_buffer[i]==2)
        {
                for(int j=0;j<samples_per_symbol_;j++) 
                {
                        tmp_buffer.push_back(0);
                }      
        }
        else if(sequence_buffer[i]==1)
        {
                for(int j=0;j<samples_per_symbol_;j++) 
                {
                        if(j< samples_per_symbol_/2) tmp_buffer.push_back(amplitude_);
                        else tmp_buffer.push_back(0);
                }
        }
        else if(sequence_buffer[i]==0)
        {
                for(int j=0;j<samples_per_symbol_;j++) 
                {
                        if(j< samples_per_symbol_/2) tmp_buffer.push_back(0);
                        else tmp_buffer.push_back(amplitude_);
                }
        }
  }
  
  items_written= output_function(tmp_buffer, out, noutput_items-out_counter, out_counter);

  // Tell runtime system how many output items we produced.
  return out_counter+items_written;
}
