/*
 * config.h is generated by configure.  It contains the results
 * of probing for features, options etc.  It should be the first
 * file included in your .cc file.
 */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <alibaba_blocksplitter_ff.h>
#include <gr_io_signature.h>

/*
 * Create a new instance of alibaba_blocksplitter_ff and return
 * a boost shared_ptr.  This is effectively the public constructor.
 */
alibaba_blocksplitter_ff_sptr 
alibaba_make_blocksplitter_ff (float offset, int how_many, float block_separation_value)
{
  return alibaba_blocksplitter_ff_sptr (new alibaba_blocksplitter_ff (offset, how_many, block_separation_value));
}

/*
 * Specify constraints on number of input and output streams.
 * This info is used to construct the input and output signatures
 * (2nd & 3rd args to gr_block's constructor).  The input and
 * output signatures are used by the runtime system to
 * check that a valid number and type of inputs and outputs
 * are connected to this block.  In this case, we accept
 * only 1 input and 1 output.
 */
static const int MIN_IN = 1;	// mininum number of input streams
static const int MAX_IN = 1;	// maximum number of input streams
static const int MIN_OUT = 1;	// minimum number of output streams
static const int MAX_OUT = 1;	// maximum number of output streams

/*
 * The private constructor
 */
alibaba_blocksplitter_ff::alibaba_blocksplitter_ff (float offset, int how_many, float block_separation_value)
  : gr_block ("blocksplitter_ff",
	      gr_make_io_signature (MIN_IN, MAX_IN, sizeof (float)),
	      gr_make_io_signature (MIN_OUT, MAX_OUT, sizeof (float)))
{
	offset_=offset;
	how_many_=how_many;
        tmp_buffer.clear();
        zero_counter=0;
        block_separation_value_=block_separation_value;
}

/*
 * Our virtual destructor.
 */
alibaba_blocksplitter_ff::~alibaba_blocksplitter_ff ()
{
}

int alibaba_blocksplitter_ff::output_function(std::vector<float> *ob, float *out, int available_output_items, int out_counter, int zero_count)
{
        int tmp_size=ob->size();
        int min=std::min(tmp_size-zero_count,available_output_items);
        if(min==0) return 0;
        if(tmp_size<=min && zero_count==0)
        {
                std::copy(ob->begin(), ob->end(), &out[out_counter]);
                ob->clear();
        }
        else 
        {
                std::copy(ob->begin(), ob->begin()+min, &out[out_counter]);
                ob->erase(ob->begin(), ob->begin()+min);
        }
        return min;
}

int 
alibaba_blocksplitter_ff::general_work (int noutput_items,
			       gr_vector_int &ninput_items,
			       gr_vector_const_void_star &input_items,
			       gr_vector_void_star &output_items)
{
  const float *in = (const float *) input_items[0];
  float *out = (float *) output_items[0];

  int items_written=0;
  int out_counter=0;

  if(tmp_buffer.size()-zero_counter > 0) //there are still samples from the previous run!
  {
        int items_avail=noutput_items-out_counter;
        items_written= output_function(&tmp_buffer, out, items_avail, out_counter, zero_counter);
        out_counter+=items_written;
        if(items_written==items_avail)
        {              
                consume_each (0); //we haven't consumed one single input item yet!
                return out_counter;
        }
  }

  for (int i = 0; i < noutput_items; i++)
  {

        tmp_buffer.push_back(in[i]);
        if(in[i]<offset_)
        {
              zero_counter++;
        }
        else
        {
                zero_counter=0;
        }
        if(zero_counter>=how_many_)
        {
                tmp_buffer.erase(tmp_buffer.end()-zero_counter+1,tmp_buffer.end()); //erase deletes the all elements between start and end (including start, but excluding end)
                tmp_buffer[tmp_buffer.size()-1]=block_separation_value_; //set the last element to the block separation value
                zero_counter=0;
        }
  }


  items_written= output_function(&tmp_buffer, out, noutput_items-out_counter, out_counter, zero_counter);
  out_counter+=items_written;

  // Tell runtime system how many input items we consumed on
  // each input stream.

  consume_each (noutput_items);

  // Tell runtime system how many output items we produced.
  return out_counter;
}
